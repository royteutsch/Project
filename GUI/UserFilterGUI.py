#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Feb 24, 2022 10:24:54 AM +0200  platform: Windows NT
import logging
import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *


# import ColourFilterGUI_support
from GUI import UserFilterAddGUI


class Toplevel1:
    def __init__(self, top=None, current_users=None, all_users=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        if current_users is None:
            current_users = []
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("227x313+660+303")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1, 1)
        top.title("User Filter")
        top.configure(background="#d9d9d9")

        self.top = top
        if current_users is not None:
            self.user_list = current_users  # A list of all users that we put in
        else:
            self.user_list = []
        self.listvar = tk.StringVar()
        self.all_users = all_users

        self.user_box = ScrolledListBox(self.top)
        self.user_box.place(relx=0.0, rely=0.06, relheight=0.723
                            , relwidth=0.974)
        self.user_box.configure(background="white")
        self.user_box.configure(cursor="xterm")
        self.user_box.configure(disabledforeground="#a3a3a3")
        self.user_box.configure(font="TkFixedFont")
        self.user_box.configure(foreground="black")
        self.user_box.configure(highlightbackground="#d9d9d9")
        self.user_box.configure(highlightcolor="#d9d9d9")
        self.user_box.configure(selectbackground="blue")
        self.user_box.configure(selectforeground="white")
        self.user_box.configure(listvariable=self.listvar)

        self.add_user_button = tk.Button(self.top)
        self.add_user_button.place(relx=0.0, rely=0.799, height=64, width=227)
        self.add_user_button.configure(activebackground="#ececec")
        self.add_user_button.configure(activeforeground="#000000")
        self.add_user_button.configure(background="#d9d9d9")
        self.add_user_button.configure(compound='left')
        self.add_user_button.configure(disabledforeground="#a3a3a3")
        self.add_user_button.configure(font="-family {David} -size 30")
        self.add_user_button.configure(foreground="#000000")
        self.add_user_button.configure(highlightbackground="#d9d9d9")
        self.add_user_button.configure(highlightcolor="black")
        self.add_user_button.configure(pady="0")
        self.add_user_button.configure(text='''Add''')
        self.add_user_button.configure(command=lambda :self.get_new_user())

        self.top.after(100, lambda: self.update_listvar())

    def update_listvar(self):
        self.listvar = self.list_to_stringvar(self.user_list)
        self.user_box.configure(listvariable=self.listvar)
        self.top.after(100, lambda: self.update_listvar())

    def get_new_user(self):
        to = tk.Toplevel(self.top)
        self.user_filter = UserFilterAddGUI.Toplevel1(top=to, users=self.all_users)
        self.top.after(100, lambda: self.await_new_user())

    def await_new_user(self):
        if self.user_filter.final_name is not "":
            logging.info(self.user_filter.final_name)
            if self.user_filter.final_name not in self.user_list:
                self.user_list.append(self.user_filter.final_name)
            else:
                self.user_list.remove(self.user_filter.final_name)
            logging.info(self.user_list)
            self.user_filter.top.destroy()
        else:
            self.top.after(100, lambda: self.await_new_user())

    def list_to_stringvar(self, lst) -> tk.StringVar:
        strvar = ''
        for item in lst:
            strvar += str(item) + " "
        strvar = strvar[:-1]
        listvar = tk.StringVar(value=strvar)
        logging.info(listvar.get())
        return listvar

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

    def size_(self):
        sz = tk.Listbox.size(self)
        return sz


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


# def start_up():
#     ColourFilterGUI_support.main()


if __name__ == '__main__':
    root = tk.Tk()
    t = Toplevel1(root)
    root.mainloop()
