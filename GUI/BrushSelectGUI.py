#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Feb 24, 2022 10:40:44 AM +0200  platform: Windows NT
import math
import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

# import ColourAddGUI_support
from typing import Tuple


class Toplevel1:
    def __init__(self, top=None, outline_colour='#000000', fill_colour='#ffffff', width=5):
        super(Toplevel1, self).__init__()
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("494x196+699+314")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("Select Brush")
        top.configure(background="#d9d9d9")

        self.top = top
        self.line_C = outline_colour
        self.fill_C = fill_colour
        self.line_C_RGB = self.hex_to_rgb(outline_colour[1:])
        self.fill_C_RGB = self.hex_to_rgb(fill_colour[1:])
        self.width = width
        self.width_var = tk.IntVar(value=self.width)
        self.Changed = 0

        self.line_R = tk.IntVar(value=self.line_C_RGB[0])
        self.line_G = tk.IntVar(value=self.line_C_RGB[1])
        self.line_B = tk.IntVar(value=self.line_C_RGB[2])

        self.fill_R = tk.IntVar(value=self.fill_C_RGB[0])
        self.fill_G = tk.IntVar(value=self.fill_C_RGB[1])
        self.fill_B = tk.IntVar(value=self.fill_C_RGB[2])

        self.colour_preview_frame = tk.Frame(self.top)
        self.colour_preview_frame.place(relx=0.0, rely=0.0, relheight=0.383
                                        , relwidth=0.496)
        self.colour_preview_frame.configure(relief='groove')
        self.colour_preview_frame.configure(borderwidth="2")
        self.colour_preview_frame.configure(relief="groove")
        self.colour_preview_frame.configure(background="#d9d9d9")

        self.line_preview_label = tk.Label(self.colour_preview_frame)
        self.line_preview_label.place(relx=0.041, rely=0.133, height=51, width=34)
        self.line_preview_label.configure(anchor='w')
        self.line_preview_label.configure(background="#d9d9d9")
        self.line_preview_label.configure(compound='left')
        self.line_preview_label.configure(disabledforeground="#a3a3a3")
        self.line_preview_label.configure(font="-family {David} -size 24")
        self.line_preview_label.configure(foreground="#000000")
        self.line_preview_label.configure(text='''L:''')

        self.line_colour_preview = tk.Canvas(self.colour_preview_frame)
        self.line_colour_preview.place(relx=0.204, rely=0.133, relheight=0.707
                                       , relwidth=0.216)
        self.line_colour_preview.configure(background="#d9d9d9")
        self.line_colour_preview.configure(borderwidth="2")
        self.line_colour_preview.configure(insertbackground="black")
        self.line_colour_preview.configure(relief="ridge")
        self.line_colour_preview.configure(selectbackground="blue")
        self.line_colour_preview.configure(selectforeground="white")

        self.fill_preview_label = tk.Label(self.colour_preview_frame)
        self.fill_preview_label.place(relx=0.49, rely=0.133, height=51, width=34)
        self.fill_preview_label.configure(activebackground="#f9f9f9")
        self.fill_preview_label.configure(activeforeground="black")
        self.fill_preview_label.configure(anchor='w')
        self.fill_preview_label.configure(background="#d9d9d9")
        self.fill_preview_label.configure(compound='left')
        self.fill_preview_label.configure(disabledforeground="#a3a3a3")
        self.fill_preview_label.configure(font="-family {David} -size 24")
        self.fill_preview_label.configure(foreground="#000000")
        self.fill_preview_label.configure(highlightbackground="#d9d9d9")
        self.fill_preview_label.configure(highlightcolor="black")
        self.fill_preview_label.configure(text='''F:''')

        self.fill_colour_preview = tk.Canvas(self.colour_preview_frame)
        self.fill_colour_preview.place(relx=0.653, rely=0.133, relheight=0.707
                                       , relwidth=0.216)
        self.fill_colour_preview.configure(background="#d9d9d9")
        self.fill_colour_preview.configure(borderwidth="2")
        self.fill_colour_preview.configure(highlightbackground="#d9d9d9")
        self.fill_colour_preview.configure(highlightcolor="black")
        self.fill_colour_preview.configure(insertbackground="black")
        self.fill_colour_preview.configure(relief="ridge")
        self.fill_colour_preview.configure(selectbackground="blue")
        self.fill_colour_preview.configure(selectforeground="white")

        self.line_width_selection_frame = tk.Frame(self.top)
        self.line_width_selection_frame.place(relx=0.486, rely=0.0, relheight=0.383
                                              , relwidth=0.516)
        self.line_width_selection_frame.configure(relief='groove')
        self.line_width_selection_frame.configure(borderwidth="2")
        self.line_width_selection_frame.configure(relief="groove")
        self.line_width_selection_frame.configure(background="#d9d9d9")

        self.line_width_label = tk.Label(self.line_width_selection_frame)
        self.line_width_label.place(relx=0.078, rely=0.133, height=51, width=164)
        self.line_width_label.configure(anchor='w')
        self.line_width_label.configure(background="#d9d9d9")
        self.line_width_label.configure(compound='left')
        self.line_width_label.configure(disabledforeground="#a3a3a3")
        self.line_width_label.configure(font="-family {David} -size 24")
        self.line_width_label.configure(foreground="#000000")
        self.line_width_label.configure(text='''Line Width:''')

        self.line_width_entry = tk.Entry(self.line_width_selection_frame)
        self.line_width_entry.place(relx=0.784, rely=0.133, height=50
                                    , relwidth=0.173)
        self.line_width_entry.configure(background="white")
        self.line_width_entry.configure(disabledforeground="#a3a3a3")
        self.line_width_entry.configure(font="TkFixedFont")
        self.line_width_entry.configure(foreground="#000000")
        self.line_width_entry.configure(insertbackground="black")
        self.line_width_entry.configure(textvariable=self.width_var)

        self.line_colour_selection_label = tk.Label(self.top)
        self.line_colour_selection_label.place(relx=0.02, rely=0.459, height=61
                                               , width=224)
        self.line_colour_selection_label.configure(anchor='w')
        self.line_colour_selection_label.configure(background="#d9d9d9")
        self.line_colour_selection_label.configure(compound='left')
        self.line_colour_selection_label.configure(disabledforeground="#a3a3a3")
        self.line_colour_selection_label.configure(font="-family {David} -size 24")
        self.line_colour_selection_label.configure(foreground="#000000")
        self.line_colour_selection_label.configure(text='''L: (     ,      ,      )''')

        self.line_R_value_entry = tk.Entry(self.top)
        self.line_R_value_entry.place(relx=0.121, rely=0.51, height=40
                                      , relwidth=0.069)
        self.line_R_value_entry.configure(background="white")
        self.line_R_value_entry.configure(disabledforeground="#a3a3a3")
        self.line_R_value_entry.configure(font="TkFixedFont")
        self.line_R_value_entry.configure(foreground="#000000")
        self.line_R_value_entry.configure(insertbackground="black")
        self.line_R_value_entry.configure(textvariable=self.line_R)

        self.line_G_value_entry = tk.Entry(self.top)
        self.line_G_value_entry.place(relx=0.223, rely=0.51, height=40
                                      , relwidth=0.069)
        self.line_G_value_entry.configure(background="white")
        self.line_G_value_entry.configure(disabledforeground="#a3a3a3")
        self.line_G_value_entry.configure(font="TkFixedFont")
        self.line_G_value_entry.configure(foreground="#000000")
        self.line_G_value_entry.configure(insertbackground="black")
        self.line_G_value_entry.configure(textvariable=self.line_G)

        self.line_B_value_entry = tk.Entry(self.top)
        self.line_B_value_entry.place(relx=0.324, rely=0.51, height=40
                                      , relwidth=0.069)
        self.line_B_value_entry.configure(background="white")
        self.line_B_value_entry.configure(disabledforeground="#a3a3a3")
        self.line_B_value_entry.configure(font="TkFixedFont")
        self.line_B_value_entry.configure(foreground="#000000")
        self.line_B_value_entry.configure(insertbackground="black")
        self.line_B_value_entry.configure(textvariable=self.line_B)

        self.fill_colour_selection_label = tk.Label(self.top)
        self.fill_colour_selection_label.place(relx=0.506, rely=0.459, height=61
                                               , width=224)
        self.fill_colour_selection_label.configure(anchor='w')
        self.fill_colour_selection_label.configure(background="#d9d9d9")
        self.fill_colour_selection_label.configure(compound='left')
        self.fill_colour_selection_label.configure(disabledforeground="#a3a3a3")
        self.fill_colour_selection_label.configure(font="-family {David} -size 24")
        self.fill_colour_selection_label.configure(foreground="#000000")
        self.fill_colour_selection_label.configure(text='''F: (     ,     ,      )''')

        self.fill_R_value_entry = tk.Entry(self.top)
        self.fill_R_value_entry.place(relx=0.607, rely=0.51, height=40
                                      , relwidth=0.069)
        self.fill_R_value_entry.configure(background="white")
        self.fill_R_value_entry.configure(disabledforeground="#a3a3a3")
        self.fill_R_value_entry.configure(font="TkFixedFont")
        self.fill_R_value_entry.configure(foreground="#000000")
        self.fill_R_value_entry.configure(insertbackground="black")
        self.fill_R_value_entry.configure(textvariable=self.fill_R)

        self.fill_G_value_entry = tk.Entry(self.top)
        self.fill_G_value_entry.place(relx=0.688, rely=0.51, height=40
                                      , relwidth=0.069)
        self.fill_G_value_entry.configure(background="white")
        self.fill_G_value_entry.configure(disabledforeground="#a3a3a3")
        self.fill_G_value_entry.configure(font="TkFixedFont")
        self.fill_G_value_entry.configure(foreground="#000000")
        self.fill_G_value_entry.configure(insertbackground="black")
        self.fill_G_value_entry.configure(textvariable=self.fill_G)

        self.fill_B_value_entry = tk.Entry(self.top)
        self.fill_B_value_entry.place(relx=0.789, rely=0.51, height=40
                                      , relwidth=0.069)
        self.fill_B_value_entry.configure(background="white")
        self.fill_B_value_entry.configure(disabledforeground="#a3a3a3")
        self.fill_B_value_entry.configure(font="TkFixedFont")
        self.fill_B_value_entry.configure(foreground="#000000")
        self.fill_B_value_entry.configure(insertbackground="black")
        self.fill_B_value_entry.configure(textvariable=self.fill_B)

        self.apply_button = tk.Button(self.top)
        self.apply_button.place(relx=0.395, rely=0.8, height=40, width=100)
        self.apply_button.configure(activebackground="#ececec")
        self.apply_button.configure(activeforeground="#000000")
        self.apply_button.configure(background="#d9d9d9")
        self.apply_button.configure(compound='left')
        self.apply_button.configure(disabledforeground="#a3a3a3")
        self.apply_button.configure(font="-family {David} -size 18")
        self.apply_button.configure(foreground="#000000")
        self.apply_button.configure(highlightbackground="#d9d9d9")
        self.apply_button.configure(highlightcolor="black")
        self.apply_button.configure(pady="0")
        self.apply_button.configure(text='''Apply''')
        self.apply_button.configure(command=lambda: self.apply_colour())

        self.apply_colour()

    def hex_to_rgb(self, hex) -> Tuple[int, ...]:
        rgb = []
        for i in (0, 2, 4):
            decimal = int(hex[i:i + 2], 16)
            rgb.append(decimal)
        return tuple(rgb)

    def rgb_to_hex(self, rgb: Tuple[int, int, int]) -> str:
        print(str(rgb))
        print('#'+'%02x%02x%02x' % rgb)
        return '#' + '%02x%02x%02x' % rgb

    def apply_colour(self):
        # Change Our parameters according to entered parameters, and update previews
        new_line = (self.line_R.get(), self.line_G.get(), self.line_B.get())
        self.line_C = self.rgb_to_hex(new_line)
        new_fill = (self.fill_R.get(), self.fill_G.get(), self.fill_B.get())
        self.fill_C = self.rgb_to_hex(new_fill)
        self.width = abs(self.width_var.get())

        self.line_colour_preview.configure(background=self.line_C)
        self.fill_colour_preview.configure(background=self.fill_C)
        self.Changed = 1


#def start_up():
#    ColourAddGUI_support.main()

if __name__ == '__main__':
    root = tk.Tk()
    t = Toplevel1(root)
    root.mainloop()





