#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Feb 24, 2022 10:44:28 AM +0200  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

# import ColourFilterAddGUI_support
from typing import Tuple


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        top.geometry("480x149+650+467")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1, 1)
        top.title("Add Colour")
        top.configure(background="#d9d9d9")

        self.top = top
        self.colour_rgb = (255, 255, 255)
        self.colour_hex = '#000000'
        self.colour_R = tk.StringVar(value=255)
        self.colour_G = tk.StringVar(value=255)
        self.colour_B = tk.StringVar(value=255)
        self.final_colour = ''

        self.add_colour_filter_label = tk.Label(self.top)
        self.add_colour_filter_label.place(relx=0.021, rely=0.067, height=101
                                           , width=454)
        self.add_colour_filter_label.configure(anchor='w')
        self.add_colour_filter_label.configure(background='#d9d9d9')
        self.add_colour_filter_label.configure(compound='left')
        self.add_colour_filter_label.configure(disabledforeground="#a3a3a3")
        self.add_colour_filter_label.configure(font="-family {David} -size 24")
        self.add_colour_filter_label.configure(foreground="#000000")
        self.add_colour_filter_label.configure(text='''(         ,         ,         )  Prev:''')

        self.filter_R_value_entry = tk.Entry(self.top)
        self.filter_R_value_entry.place(relx=0.063, rely=0.201, height=60
                                        , relwidth=0.092)
        self.filter_R_value_entry.configure(background="white")
        self.filter_R_value_entry.configure(disabledforeground="#a3a3a3")
        self.filter_R_value_entry.configure(font="TkFixedFont")
        self.filter_R_value_entry.configure(foreground="#000000")
        self.filter_R_value_entry.configure(insertbackground="black")
        self.filter_R_value_entry.configure(textvariable=self.colour_R)

        self.filter_G_value_entry = tk.Entry(self.top)
        self.filter_G_value_entry.place(relx=0.208, rely=0.201, height=60
                                        , relwidth=0.092)
        self.filter_G_value_entry.configure(background="white")
        self.filter_G_value_entry.configure(disabledforeground="#a3a3a3")
        self.filter_G_value_entry.configure(font="TkFixedFont")
        self.filter_G_value_entry.configure(foreground="#000000")
        self.filter_G_value_entry.configure(insertbackground="black")
        self.filter_G_value_entry.configure(textvariable=self.colour_G)

        self.filter_B_value_entry = tk.Entry(self.top)
        self.filter_B_value_entry.place(relx=0.354, rely=0.201, height=60
                                        , relwidth=0.092)
        self.filter_B_value_entry.configure(background="white")
        self.filter_B_value_entry.configure(disabledforeground="#a3a3a3")
        self.filter_B_value_entry.configure(font="TkFixedFont")
        self.filter_B_value_entry.configure(foreground="#000000")
        self.filter_B_value_entry.configure(insertbackground="black")
        self.filter_B_value_entry.configure(textvariable=self.colour_B)

        self.filter_colour_preview = tk.Canvas(self.top)
        self.filter_colour_preview.place(relx=0.667, rely=0.134, relheight=0.557
                                         , relwidth=0.194)
        self.filter_colour_preview.configure(background="#d9d9d9")
        self.filter_colour_preview.configure(borderwidth="2")
        self.filter_colour_preview.configure(insertbackground="black")
        self.filter_colour_preview.configure(relief="ridge")
        self.filter_colour_preview.configure(selectbackground="blue")
        self.filter_colour_preview.configure(selectforeground="white")

        self.colour_add_button = tk.Button(self.top)
        self.colour_add_button.place(relx=0.063, rely=0.671, height=44, width=187)
        self.colour_add_button.configure(activebackground="#ececec")
        self.colour_add_button.configure(activeforeground="#000000")
        self.colour_add_button.configure(background="#d9d9d9")
        self.colour_add_button.configure(compound='left')
        self.colour_add_button.configure(disabledforeground="#a3a3a3")
        self.colour_add_button.configure(font="-family {David} -size 24")
        self.colour_add_button.configure(foreground="#000000")
        self.colour_add_button.configure(highlightbackground="#d9d9d9")
        self.colour_add_button.configure(highlightcolor="black")
        self.colour_add_button.configure(pady="0")
        self.colour_add_button.configure(text='''Add/Remove''')
        self.colour_add_button.configure(command=lambda: self.decide_on_colour())

        self.top.after(100, lambda: self.update_colour())

    def regulate_colours(self):
        if int(self.colour_R.get()) > 255:
            self.colour_R.set(value=255)
        if int(self.colour_R.get()) < 0:
            self.colour_R.set(value=0)
        if int(self.colour_G.get()) > 255:
            self.colour_G.set(value=255)
        if int(self.colour_G.get()) < 0:
            self.colour_G.set(value=0)
        if int(self.colour_B.get()) > 255:
            self.colour_B.set(value=255)
        if int(self.colour_B.get()) < 0:
            self.colour_B.set(value=0)

    def rgb_to_hex(self, rgb: Tuple[int, int, int]) -> str:
        return '#' + '%02x%02x%02x' % rgb

    def is_num(self, maybe_num):
        try:
            int(maybe_num.get())
            return True
        except ValueError:
            return False

    def update_colour(self):
        if self.is_num(self.colour_R) and self.is_num(self.colour_G) and self.is_num(self.colour_B):
            self.regulate_colours()
            self.colour_rgb = (int(self.colour_R.get()), int(self.colour_G.get()), int(self.colour_B.get()))
            self.colour_hex = self.rgb_to_hex(self.colour_rgb)
            self.filter_colour_preview.configure(background=self.colour_hex)
        self.top.after(100, lambda: self.update_colour())

    def decide_on_colour(self):
        if self.is_num(self.colour_R) and self.is_num(self.colour_G) and self.is_num(self.colour_B):
            self.regulate_colours()
            self.colour_rgb = (int(self.colour_R.get()), int(self.colour_B.get()), int(self.colour_G.get()))
            self.final_colour = self.rgb_to_hex(self.colour_rgb)

# def start_up():
#     ColourFilterAddGUI_support.main()

if __name__ == '__main__':
    root = tk.Tk()
    t = Toplevel1(root)
    root.mainloop()
